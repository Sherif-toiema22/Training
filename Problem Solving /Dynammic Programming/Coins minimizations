#include <iostream>
#include <vector>
#include <algorithm>
#include <limits.h>

using namespace std;

int minCoinsRecursive(int x, const vector<int>& coins, vector<int>& dp) {
    // Base case: When sum is 0, no coins are needed
    if (x == 0) return 0;

    // If sum is negative, return a large number to indicate it's impossible
    if (x < 0) return INT_MAX;

    // If the value is already computed, return it
    if (dp[x] != -1) return dp[x];

    int min_coins = INT_MAX;

    // Try every coin and see which gives the minimum number of coins
    for (int coin : coins) {
        int res = minCoinsRecursive(x - coin, coins, dp);
        if (res != INT_MAX) {
            min_coins = min(min_coins, res + 1);
        }
    }

    // Store the result in dp array
    dp[x] = min_coins;
    return dp[x];
}

int main() {
    int n, x;
    cin >> n >> x;
    vector<int> coins(n);
    for (int i = 0; i < n; i++) {
        cin >> coins[i];
    }

    // Initialize dp array with -1 (indicating uncomputed values)
    vector<int> dp(x + 1, -1);

    int result = minCoinsRecursive(x, coins, dp);

    // If result is INT_MAX, it means it's not possible to form sum x
    if (result == INT_MAX) {
        cout << -1 << endl;
    } else {
        cout << result << endl;
    }

    return 0;
}

